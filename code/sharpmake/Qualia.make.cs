using System.IO; // For Path.Combine
using Sharpmake; // Contains the entire Sharpmake object library.

// Represents the project that will be generated by Sharpmake and that contains
// the sample C++ code.

[module: Sharpmake.Include("globals.cs")]
[module: Sharpmake.Include("KNRGraphics.make.cs")]

[Generate]
public class KNRSln : Solution
{    
    public KNRSln()
    {
        Name = "KNR";
        AddTargets(new Target(
                Platform.win32 | Platform.win64,
                DevEnv.vs2019,
                Optimization.Debug | Optimization.Release
        ));
    }

    [Configure]
    public void Configure(Configuration conf, Target target)
    {
        conf.SolutionFileName = "[solution.Name]";
        conf.SolutionPath = Globals.ProjectRoot;
        conf.AddProject<CoreProject>(target);
        conf.AddProject<KNRGraphics>(target);
    }
}

[Generate]
public class CoreProject : Sharpmake.Project
{
    public string[] GetDefinesByOptimization(Target target)
    {
        switch (target.Optimization)
        {
        case Optimization.Debug:
        case Optimization.Release:
            return new[]{
                "_KNR_",
            };
        }

        return null;
    }

    public CoreProject()
    {
        Name = "CoreProject";

        AddTargets(new Target(
                Platform.win32 | Platform.win64,
                DevEnv.vs2019,
                Optimization.Debug | Optimization.Release
        ));
        SourceRootPath = @"[project.SharpmakeCsPath]\codebase";
    }
    [Configure]
    public void ConfigureAll(Configuration conf, Target target)
    {
        conf.ProjectFileName = "[project.Name]_[target.DevEnv]_[target.Platform]";
        conf.ProjectPath = Globals.BuildDir;

        conf.Defines.AddRange(GetDefinesByOptimization(target));

        // if not set, no precompile option will be used.
        conf.PrecompHeader = "stdafx.h";
        conf.PrecompSource = "stdafx.cpp";
        conf.CustomProperties.Add("CustomOptimizationProperty", $"Custom-{target.Optimization}");
    }
}


public static class Main
{
    [Sharpmake.Main]
    public static void SharpmakeMain(Sharpmake.Arguments arguments)
    {
        KitsRootPaths.SetUseKitsRootForDevEnv(DevEnv.vs2019, KitsRootEnum.KitsRoot10, Options.Vc.General.WindowsTargetPlatformVersion.v10_0_19041_0);
       
        //Solutions to generate
        arguments.Generate<KNRSln>();
    }
}